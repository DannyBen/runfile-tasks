require 'fileutils'

title 'Gem management commands'
summary 'Add gem building and publishing to your gem project'

require_context :gemname

help   'Build and optionally install the gem'
usage  '(build | b) [--install]'
option '--install, -i', 'Install after building'
action :build, :b do |args|
  say "g`Building #{gemname}`"
  run "gem build #{gemname}.gemspec --output #{gemfile}"
  install_gem if args['--install']
end

help   'Install the last built gem'
action :install, :i do
  need_gemfile
  install_gem
end

help   'Publish gem to rubygems'
action :publish, :p do
  need_gemfile
  say 'g`Publishing gem`'
  run "gem push #{gemfile}"
end

usage  'yank VERSION'
help   'Yank gem from rubygems'
action :yank do |args|
  version = args['VERSION']
  say "rib` Yank #{gemname} #{version} ` Are you sure?"
  10.downto(0) do |i|
    say "Yanking in #{i} seconds - Ctrl-C to abort  ", replace: true
    sleep 1
  end
  say 'g`Yanking gem`', replace: true
  run "gem yank #{gemname} -v #{version}"
end

helpers do
  def gemname
    context[:gemname]
  end

  def gemfile
    "/tmp/#{gemname}.gem"
  end

  def run(cmd)
    say "$ m`#{cmd}`"
    system cmd unless ENV['DRY_RUN']
  end

  def install_gem
    say "g`Installing #{gemname}`"
    run "gem install --local #{gemfile}"
  end

  def need_gemfile
    raise UserError, "File not found #{gemfile}" unless File.exist? gemfile
  end
end
