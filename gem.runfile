require 'fileutils'

help   'Build and optionally install the gem'
usage  '(build | b) [--install]'
option '--install, -i', 'Install after building'
action :build, :b do |args|
  cmd = "gem build #{gemname}.gemspec --output #{gemfile}"
  say "g`Building gem`"
  say "$ m`#{cmd}`"
  FileUtils.mkdir_p 'tmp'
  system cmd

  execute 'gem install' if args['--install']
end

help   'Install the last built gem'
action :install, :i do |_args|
  cmd = "gem install --local #{gemfile}"
  say "g`Installing gem`"
  say "$ m`#{cmd}`"
  system cmd
end

help   'Publish gem to rubygems'
action :publish, :p do
  raise UserError, "File not found #{gemfile}" unless File.exist? gemfile

  cmd = "gem push #{gemfile}"
  say "g`Publishing gem`"
  say "$ m`#{cmd}`"
  # system cmd
end

usage  'yank VERSION'
help   'Yank gem from rubygems'
action :yank do |args|
  version = args['VERSION']
  cmd = "gem yank #{gemname} -v #{version}"
  say "rib` Yanking gem `"
  say "$ m`#{cmd}`"
  10.downto(0) do |i|
    say "executing in #{i} seconds - Ctrl-C to abort  ", replace: true
    sleep 1
  end
  say 'g`Yanking gem`', replace: true
  system cmd
end

def gemname
  @gemname ||= begin
    raise UserError, 'Please provide a name in your nu`import_gem` call' unless context[:name]

    context[:name]
  end
end

def gemfile
  "tmp/#{gemname}.gem"
end
